name: Release Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'

  pull_request:
    branches:
      - main

jobs:
  build-msvc:
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false

      matrix:
        config:
        - {
            os: windows-latest,
            build_type: "Release",
            cc: "cl",
            cxx: "cl"
          }

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake
        -S ${{ github.workspace }}
        -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
        -DBUILD_SHARED_LIBS=OFF
        -DCQDE_BUILD_EXAMPLE_APP=ON

    - name: Build
      run: >
        cmake
        --build ${{ steps.strings.outputs.build-output-dir }}
        --config ${{ matrix.config.build_type }}

  build-unix:
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false

      matrix:
        config:
        - {
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            generators: "Ninja"
          }
        - {
            os: ubuntu-latest,
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            generators: "Ninja"
          }

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Ubuntu)
      if: matrix.config.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt install -y xorg-dev libasound2-dev ninja

    - name: Configure CMake
      run: >
        cmake
        -S ${{ github.workspace }}
        -B ${{ steps.strings.outputs.build-output-dir }}
        -G ${{ matrix.config.generators }}
        -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
        -DCQDE_BUILD_EXAMPLE_APP=ON

    - name: Build
      run: >
        cmake
        --build ${{ steps.strings.outputs.build-output-dir }}
        --config ${{ matrix.config.build_type }}
